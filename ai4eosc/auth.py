"""
Authentication for private methods of the API (mainly managing deployments)

Authentication is implemented using `get_user_infos_from_access_token` instead
of `get_user_infos_from_request` (as done in the FastAPI example in the flaat docs).
There are two advantages of this:
* the main one is that it would enable us enable to take advantage of Swagger's builtin
  Authentication and Authorization [1] in the Swagger interface (generated by FastAPI).
  This is not possible using the `Request` object, as data from `Request` cannot be validated and
  documented by OpenAPI [2].

  [1] https://swagger.io/docs/specification/authentication/
  [2] https://fastapi.tiangolo.com/advanced/using-request-directly/?h=request#details-about-the-request-object

* the decorator `flaat.is_authenticated()` around each function is no longer needed, 
  as authentication is checked automatically by `authorization=Depends(security)` without needing extra code.

The curl calls still remain the same, but now in the http://localhost/docs you will see an authorize
 button where you can copy paste your token. So you will be able to access authenticated methods from the interface.
"""

import re

from fastapi import HTTPException
from flaat.config import AccessLevel
from flaat.requirements import CheckResult, HasSubIss, IsTrue
from flaat.fastapi import Flaat

from ai4eosc.conf import MAIN_CONF


flaat:Flaat = Flaat()


def is_admin(user_infos):
    return user_infos.user_info["email"] in MAIN_CONF["auth"]["admins"]


def init_flaat():
    flaat.set_access_levels(
        [
            AccessLevel("user", HasSubIss()),
            AccessLevel("admin", IsTrue(is_admin)),
        ]
    )

    flaat.set_trusted_OP_list(MAIN_CONF["auth"]["OP"])


def get_user_info(token):

    try:

        user_infos = flaat.get_user_infos_from_access_token(token)

        # Check scopes
        if user_infos.get('eduperson_entitlement') is None:
            raise Exception("Check you enabled the `eduperson_entitlement` scope for your token.")

        # Parse Virtual Organizations manually from URNs
        # If more complexity is need in the future, check https://github.com/oarepo/urnparse
        vos = []
        for i in user_infos.get('eduperson_entitlement'):  # VOs
            vos.append(
                re.search(r"group:(.+?):", i).group(1)
            )

        # Generate user info dict
        out = {
            'id': user_infos.get('sub'),  # subject, user-ID
            'issuer': user_infos.get('iss'),  # URL of the access token issuer
            'name': user_infos.get('name'),
            'vo': set(vos), 
            # 'email': user_infos.get('voperson_verified_email'),
        }

    except Exception as e:
        raise HTTPException(
            status_code=403,
            detail=str(e),
            )

    return out
