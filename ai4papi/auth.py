"""Authentication for private methods of the API (mainly managing deployments)."""

# Implementation notes:
# Authentication is implemented using `get_user_infos_from_access_token` instead
# of `get_user_infos_from_request` (as done in the FastAPI example in the flaat docs).
# There are two advantages of this:
# * the main one is that it would enable us enable to take advantage of Swagger's
#   builtin Authentication and Authorization [1] in the Swagger interface (generated by
#   FastAPI).  This is not possible using the `Request` object, as data from `Request`
#   cannot be validated and documented by OpenAPI [2].
#
#   [1] https://swagger.io/docs/specification/authentication/
#   [2] https://fastapi.tiangolo.com/advanced/using-request-directly
#
# * the decorator `flaat.is_authenticated()` around each function is no longer needed,
#   as authentication is checked automatically by `authorization=Depends(security)`
#   without needing extra code.
#
# The curl calls still remain the same, but now in the http://localhost/docs you will
# see an authorize button where you can copy paste your token. So you will be able to
# access authenticated methods from the interface.

import re

from fastapi import HTTPException
from flaat.fastapi import Flaat

from ai4papi.conf import MAIN_CONF


# Initialize flaat
flaat = Flaat()
flaat.set_trusted_OP_list(MAIN_CONF["auth"]["OP"])


def get_user_info(token):
    """Return user information from a token."""
    try:
        user_infos = flaat.get_user_infos_from_access_token(token)
    except Exception as e:
        raise HTTPException(
            status_code=403,
            detail=str(e),
        )

    # Check output
    if user_infos is None:
        raise HTTPException(
            status_code=403,
            detail="Invalid token",
        )

    # Check scopes
    if user_infos.get("eduperson_entitlement") is None:
        raise HTTPException(
            status_code=403,
            detail="Check you enabled the `eduperson_entitlement` scope for the token.",
        )

    # Parse Virtual Organizations manually from URNs
    # If more complexity is need in the future, check https://github.com/oarepo/urnparse
    vos = []
    for i in user_infos.get("eduperson_entitlement"):
        vos.append(re.search(r"group:(.+?):", i).group(1))

    # Filter VOs to keep only the ones relevant to us
    vos = set(vos).intersection(set(MAIN_CONF["auth"]["VO"]))
    vos = sorted(vos)

    # Check if VOs is empty after filtering
    if not vos:
        raise HTTPException(
            status_code=403,
            detail="You should belong to at least one of the Virtual Organizations "
            f"supported by the project: {vos}.",
        )

    # Generate user info dict
    out = {
        "id": user_infos.get("sub"),  # subject, user-ID
        "issuer": user_infos.get("iss"),  # URL of the access token issuer
        "name": user_infos.get("name"),
        "vo": vos,
    }

    return out
